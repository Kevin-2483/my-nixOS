# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio = [1, 3, 2]
sort_by = "alphabetical"
sort_sensitive = true
sort_reverse = true
sort_dir_first = true
linemode = "size_and_mtime"
show_hidden = true
show_symlink = true

[preview]
tab_size = 2
max_width = 5000
max_height = 5000
cache_dir = ""
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[opener]
edit = [
    { run = 'lvim "$@"', desc = "Open with lunarVim", block = true, for = "unix" },
    { run = 'code "$@"', desc = "Open with VSCode", for = "unix" },
    { run = 'kitty lvim "$@"', desc = "Open with LunarVim in new window", for = "unix" },
    { run = 'zed "$@"', desc = "Open with Zed", for = "macos" },
    { run = 'code "%*"', desc = "Open with VSCode", orphan = true, for = "windows" },
]

micro = [
    { run = 'micro "$@"', desc = "Open with micro", block = true, for = "unix" },
]

open = [
    { run = 'xdg-open "$@"', desc = "Open", for = "linux" },
    { run = 'open "$@"', desc = "Open", for = "macos" },
    { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]

reveal = [
    { run = 'open -R "$1"', desc = "Reveal", for = "macos" },
    { run = 'explorer /toggle, "%1"', orphan = true, desc = "Reveal", for = "windows" },
    { run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF", for = "unix" },
]

extract = [
    { run = 'unar "$1"', desc = "Extract here", for = "unix" },
    { run = 'unar "%1"', desc = "Extract here", for = "windows" },
]

playvideo = [
    { run = 'mpv --vo=libmpv --geometry=50% --no-border --focus-on=open --mute=yes "$@"', orphan = true, for = "unix" },
    { run = 'mpv "%1"', orphan = true, for = "windows" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info", for = "unix" },
]

playaudio = [
    { run = 'wezterm-gui -e mpv --vo=libmpv --mute=no "$@"', desc = "Play audio with mpv in new window", orphan = true, for = "unix" },
    { run = 'mpv "%1"', orphan = true, for = "windows" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info", for = "unix" },
]

zathura = [{ run = 'zathura "$1"', orphan = true, for = "unix" }]
rootbrowse = [{ run = 'rootbrowse "$1"', orphan = true, for = "unix" }]

dragon = [
    { run = 'dragon -x -i -T "$1"', desc = "Open with dargon", for = "linux" },
]

ouch = [
    { run = 'ouch d -y "%*"', desc = "Extract here with ouch", for = "windows" },
    { run = 'ouch d -y "$@"', desc = "Extract here with ouch", for = "unix" },
]

[open]
rules = [
    { name = "*/", use = [
        "edit",
        "open",
        "dragon",
        "reveal",
    ] },
    { name = "*.html", use = [
        "open",
        "edit",
        "micro",
        "dragon",
        "reveal",
    ] },
    { mime = "text/*", use = [
        "edit",
        "micro",
        "dragon",
        "reveal",
    ] },

    { mime = "image/*", use = [
        "open",
        "dragon",
        "reveal",
    ] },
    { mime = "video/*", use = [
        "open",
        "playvideo",
        "dragon",
        "reveal",
    ] },
    { mime = "audio/*", use = [
        "playaudio",
        "open",
        "dragon",
        "reveal",
    ] },
    { mime = "inode/empty", use = [
        "edit",
        "micro",
        "dragon",
        "reveal",
    ] },

    { mime = "application/json", use = [
        "edit",
        "micro",
        "dragon",
        "reveal",
    ] },
    { mime = "application/pdf", use = [
        "zathura",
        "open",
        "dragon",
        "reveal",
    ] },
    { mime = "*/javascript", use = [
        "edit",
        "micro",
        "dragon",
        "reveal",
    ] },
    { name = "*.root", use = [
        "rootbrowse",
    ] },
    { name = "*.zip", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/gzip", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/tar", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/bzip", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/bzip2", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/7z-compressed", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/rar", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },
    { mime = "application/xz", use = [
        "ouch",
        "extract",
        "dragon",
        "reveal",
    ] },

    { mime = "*", use = [
        "open",
        "edit",
        "dragon",
        "reveal",
    ] },
]

[tasks]
micro_workers = 10
macro_workers = 25
bizarre_retry = 5
image_alloc = 536870912  # 512MB
image_bound = [0, 0]
suppress_preload = false

[input]
# cd
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]

# create
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# rename
rename_title = "Rename:"
rename_origin = "hovered"
rename_offset = [0, 1, 50, 3]

# trash
trash_title = "Move {n} selected file{s} to trash? (y/N)"
trash_origin = "top-center"
trash_offset = [0, 2, 50, 3]

# delete
delete_title = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin = "top-center"
delete_offset = [0, 2, 50, 3]

# filter
filter_title = "Filter:"
filter_origin = "top-center"
filter_offset = [0, 2, 50, 3]

# find
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# search
search_title = "Search:"
search_origin = "top-center"
search_offset = [0, 2, 50, 3]

# shell
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

# overwrite
overwrite_title = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [0, 2, 50, 3]

# quit
quit_title = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [0, 2, 50, 3]

[pick]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[log]
enabled = false

# [[plugin.prepend_fetchers]]
# id = "mactag"
# name = "*"
# run = "mactag"

# [[plugin.prepend_fetchers]]
# id = "mactag"
# name = "*/"
# run = "mactag"

[[plugin.prepend_fetchers]]
id = "git"
name = "*"
run = "git"

[[plugin.prepend_fetchers]]
id = "git"
name = "*/"
run = "git"

[[plugin.prepend_fetchers]]
id = "mime"
if = "!mime"
name = "*"
run = "mime-ext"
prio = "high"

[[plugin.prepend_fetchers]]
id   = "mactag"
name = "*"
run  = "mactag"

[[plugin.prepend_fetchers]]
id   = "mactag"
name = "*/"
run  = "mactag"


[plugin]
prepend_previewers = [
    { mime = "text/csv", run = "miller" },
    { name = "*.md", run = "glow" },
    { mime = "{image,audio,video}/*", run = "mediainfo" },
    { mime = "application/subrip", run = "mediainfo" },
    # Archive previewer
    { mime = "application/*zip", run = "ouch" },
    { mime = "application/tar", run = "ouch" },
    { mime = "application/bzip2", run = "ouch" },
    { mime = "application/7z-compressed", run = "ouch" },
    { mime = "application/rar", run = "ouch" },
    { mime = "application/xz", run = "ouch" },
]
previewers = [
    { name = "*/", run = "folder", sync = true },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "*/xml", run = "code" },
    { mime = "*/javascript", run = "code" },
    { mime = "*/wine-extension-ini", run = "code" },
    { name = "*.md", run = "glow" },
    # JSON
    { mime = "application/json", run = "json" },
    # # Image
    # { mime = "image/vnd.djvu", run = "noop" },
    # { mime = "image/*", run = "image" },
    # # Video
    # { mime = "video/*", run = "video" },
    { mime = "{image,audio,video}/*", run = "mediainfo" },
    { mime = "application/subrip", run = "mediainfo" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    { mime = "application/*zip", run = "ouch" },
    { mime = "application/tar", run = "ouch" },
    { mime = "application/bzip2", run = "ouch" },
    { mime = "application/7z-compressed", run = "ouch" },
    { mime = "application/rar", run = "ouch" },
    { mime = "application/xz", run = "ouch" },
    # Archive
    # { mime = "application/zip", run = "archive" },
    # { mime = "application/gzip", run = "archive" },
    # { mime = "application/tar", run = "archive" },
    # { mime = "application/bzip", run = "archive" },
    # { mime = "application/bzip2", run = "archive" },
    # { mime = "application/7z-compressed", run = "archive" },
    # { mime = "application/rar", run = "archive" },
    # { mime = "application/xz", run = "archive" },
]
